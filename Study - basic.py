# Let's go
print('Hello world')

# Метод 'format'
age = 26
name = 'Swaroop'
print('Возраст {0} -- {1} лет.'.format(name, age))
print('Почему {0} забавляется с этим Python?'.format(name))
input()


# Пример: Использование переменных и констант
i = 5
print(i)
i = i + 1
print(i)
s = '''Это многострочная строка.
Это вторая её строчка.'''
print(s)
input()


#Приоритет операторов
Оператор Описание
lambda - лямбда выражение
or - Логическое «ИЛИ»
and - Логическое «И»
not x - Логическое «НЕ»
in, not in - Проверка принадлежности
is, is not - Проверка тождественности
<, <=, >, >=, !=, ==  - Сравнения
| - Побитовое «ИЛИ »
^ - Побитовое «ИСКЛЮЧИТЕЛЬНО ИЛИ»
& - Побитовое «И»
<<, >> - Сдвиги
+, - -Сложение и вычитание
*, /, //, % - Умножение, деление, целочисленное деление и остаток от деления
+x, -x - Положительное, отрицательное
~x - Побитовое НЕ
**  - Возведение в степень
x.attribute - Ссылка на атрибут
x[индекс] - Обращение по индексу
x[индекс1:индекс2] - Вырезка
f(аргументы ...) - Вызов функции
(выражения, ...) - Связка или кортеж2
[выражения, ...] - Список
{ключ:данные,...} - Словар

# Выражения
length = 5
breadth = 2
area = length * breadth
print('Площадь равна', area)
print('Периметр равен', 2 * (length + breadth))
input()


# Оператор "if"
number = 23
guess = int(input('Введите целое число : '))
if guess == number:
	print('Поздравляю, вы угадали,') # Начало нового блока
	print('(хотя и не выиграли никакого приза!)') # Конец нового блока
elif guess < number:
	print('Нет, загаданное число немного больше этого.') # Ещё один блок
# Внутри блока вы можете выполнять всё, что угодно ...
else:
	print('Нет, загаданное число немного меньше этого.')
# чтобы попасть сюда, guess должно быть больше, чем number
	print('Завершено')
# Это последнее выражение выполняется всегда после выполнения оператора if
input()

# Оператор цикла "while"
number = 23
running = True
while running:
	guess = int(input('Введите целое число : '))
	if guess == number:
		print('Поздравляю, вы угадали.')
		running = False # это останавливает цикл while
	elif guess < number:
		print('Нет, загаданное число немного больше этого.')
	else:
		print('Нет, загаданное число немного меньше этого.')
else:
	print('Цикл while закончен.')
# Здесь можете выполнить всё что вам ещё нужно
print('Завершение.')
input()

# Булевые типы данных: "True==1, False==0"

# Цикл for
for i in range(1, 5):
	print(i)
else:
	print('Цикл for закончен')
input()

# Оператор "break"
while True:
	s = input('Введите что-нибудь : ')
	if s == 'выход':
		break
	print('Длина строки:', len(s))
print('Завершение')
input()

# функция "len"-проверка длины строки(пробелы и знаки препинания учитываются)
# Оператор "continue"-Оператор continue используется для указания Python, что необходимо пропустить всеоставшиеся команды в текущем блоке цикла и продолжить со следующей итерации цикла.
while True:
	s = input('Введите что-нибудь : ')
	if s == 'выход':
		break
	if len(s) < 3:
		print('Слишком мало')
	continue
	print('Введённая строка достаточной длины')
	# Разные другие действия здесь...

# Функция "def"
def sayHello():
	print('Привет, Мир!') # блок, принадлежащий функции
# Конец функции
sayHello() # вызов функции
sayHello() # ещё один вызов функции

# Параметры функций (!имена, указанные в объявлении функции, называются параметрами, тогда как значения, которые вы передаёте в функцию при её вызове, – аргументами.)
def printMax(a, b):
	if a > b:
		print(a, 'максимально')
	elif a == b:
		print(a, 'равно', b)
	else:
		print(b, 'максимально')
printMax(3, 4) # прямая передача значений
x = 5
y = 7
printMax(x, y) # передача переменных в качестве аргументов
input()

# Локальные переменные
x = 50
def func(x):
	print('x равен', x)
	x = 2
	print('Замена локального x на', x)
func(x)
print('x по-прежнему', x)
input()

# Зарезервированное слово «global»
x = 50
def func():
	global x
	print('x равно', x)
	x = 2
	print('Заменяем глобальное значение x на', x)
func()
print('Значение x составляет', x)

# Зарезервированное слово «nonlocal»
def func_outer():
	x = 2
	print('x равно', x)
	def func_inner():
		nonlocal x
		x = 5
	func_inner()
	print('Локальное x сменилось на', x)
func_outer()
input()

# Значения аргументов по умолчанию
def say(message, times = 1):
	print(message * times)
say('Привет')
say('Мир', 5)

# Ключевые аргументы
def func(a, b=5, c=10):
	print('a равно', a, ', b равно', b, ', а c равно', c)
func(3, 7)
func(25, c=24)
func(c=50, a=100)
input()

# Переменное число параметров
def total(a=5, *numbers, **phonebook):
	print('a', a)
#проход по всем элементам кортежа
	for single_item in numbers:
		print('single_item', single_item)
#проход по всем элементам словаря
	for first_part, second_part in phonebook.items():
		print(first_part,second_part)
print(total(10,1,2,3,4,Jack=1123,John=2231,Inge=1560,erik=2003))
input()

# Только ключевые параметры
def total(initial=5, *numbers, extra_number):
	count = initial
	for number in numbers:
		count += number
	count += extra_number
	print(count)
total(10, 1, 2, 3, extra_number=50)
input()

#Оператор «return»
def maximum(x, y):
	if x > y:
		return x
	elif x == y:
		return 'Числа равны.'
	else:
		return y
print(maximum(2, 3))
input()

# Строки документации
def printMax(x, y):
	'''Выводит максимальное из двух чисел.
Оба значения должны быть целыми числами.'''
	x = int(x) # конвертируем в целые, если возможно
	y = int(y)
	if x > y:
		print(x, 'наибольшее')
	else:
		print(y, 'наибольшее')
printMax(3, 5)
print(printMax.__doc__)
input()

# Модули
import sys
print('Аргументы командной строки:')
for i in sys.argv:
	print(i)
print('\n\nПеременная PYTHONPATH содержит', sys.path, '\n')

# Оператор from … import …
Чтобы импортировать переменную argv прямо в программу и не писать всякий раз sys.
при обращении к ней, можно воспользоваться выражением «from sys import argv».
Для импорта всех имён, использующихся в модуле sys, можно выполнить команду
«from sys import *». Это работает для любых модулей.
В общем случае вам следует избегать использования этого оператора и использовать вместо этого оператор import, чтобы предотвратить конфликты имён и не затруднять чтение
программы.
from math import *
n = int(input("Введите диапазон:- "))
p = [2, 3]
count = 2
a = 5
while (count < n):
	b=0
	for i in range(2,a):
		if ( i <= sqrt(a)):
			if (a % i == 0):
				print(a,"непростое")
				b = 1
			else:
				pass
	if (b != 1):
		print(a,"простое")
		p = p + [a]
	count = count + 1
	a = a + 2
print(p)

# Функция dir --- Встроенная функция dir() возвращает список имён, определяемых объектом. Например, для модуля в этот список входят функции, классы и переменные, определённые в этом модуле.
>>> dir() # получим список атрибутов текущего модуля
['__builtins__', '__doc__', '__name__', '__package__', 'sys']
>>> a = 5 # создадим новую переменную 'a'
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'a', 'sys']
>>> del a # удалим имя 'a'
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'sys']
>>>

# Пакеты
| - <некоторый каталог из sys.path>/
| |---- world/
| |---- __init__.py
| |---- asia/
| | |---- __init__.py
| | |---- india/
| | |---- __init__.py
| | |---- foo.py
| |---- africa/
| |---- __init__.py
| |---- madagascar/
| |---- __init__.py
| |---- bar.py

# Структуры данных --- Структуры данных – это, по сути, и есть структуры, которые могут хранить некоторые данные вместе. Другими словами, они используются для хранения связанных данных. В Python существуют четыре встроенных структуры данных: список, кортеж, словарь и множество. Посмотрим, как ими пользоваться, и как они могут облегчить нам жизнь.

# Список
a=[1,2,3,b,c,d]

# Краткое введение в объекты и классы

#Mетод "append" --- для класса list, который позволяет добавлять элемент к концу списка. Так mylist.append('and item') добавит эту строку к списку mylist.
# Это мой список покупок
shoplist = ['яблоки', 'манго', 'морковь', 'бананы']
print('Я должен сделать', len(shoplist), 'покупки.')
print('Покупки:', end=' ')
for item in shoplist:
	print(item, end=' ')
print('\nТакже нужно купить риса.')
shoplist.append('рис')
print('Теперь мой список покупок таков:', shoplist)
print('Отсортирую-ка я свой список')
shoplist.sort()
print('Отсортированный список покупок выглядит так:', shoplist)
print('Первое, что мне нужно купить, это', shoplist[0])
olditem = shoplist[0]
del shoplist[0]
print('Я купил', olditem)
print('Теперь мой список покупок:', shoplist)

# Кортеж --- служат для хранения нескольких объектов вместе.
zoo = ('питон', 'слон', 'пингвин') # помните, что скобки не обязательны
print('Количество животных в зоопарке -', len(zoo))
new_zoo = 'обезьяна', 'верблюд', zoo
print('Количество клеток в зоопарке -', len(new_zoo))
print('Все животные в новом зоопарке:', new_zoo)
print('Животные, привезённые из старого зоопарка:', new_zoo[2])
print('Последнее животное, привезённое из старого зоопарка -', new_zoo[2][2])
print('Количество животных в новом зоопарке -', len(new_zoo)-1 + len(new_zoo[2]))

# Параметр sep(separator-разделитель)
print('a', 'b', 'c', sep='*')
print('d', 'e', 'f', sep='**')

# Параметр end
print('a', 'b', 'c', end='@')
print('d', 'e', 'f', end='@@')

# end и sep
print('a', 'b', 'c', sep='*', end='finish')
print('d', 'e', 'f', sep='**', end='^__^')
print('g', 'h', 'i', sep='+', end='%')
print('j', 'k', 'l', sep='-', end='#')
print('m', 'n', 'o', sep='/', end='!')

print('Python', end='\n\n\n')

num1 = -6      # унарный минус
num2 = 17 - 7  # бинарный минус

print(10 // 3)
print(-10 // 3)

print()
