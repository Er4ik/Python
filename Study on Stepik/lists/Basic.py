Списки
В предыдущих уроках мы работали с последовательностями чисел, символов, строк, но не сохраняли всю последовательность в памяти компьютера, а обрабатывали ее поэлементно, считывая раз за разом новый элемент. Однако во многих задачах требуется сохранять всю последовательность. Например, классическая задача сортировки (упорядочения) некоторой последовательности требует сохранения всех данных в памяти компьютера. Увы, не сохранив, их невозможно отсортировать. И тут на помощь приходит структура данных, которая в большинстве языков программирования называется массивом. В Python она называется списком.

Структура данных (data structure) — программная единица, позволяющая хранить и обрабатывать множество однотипных и/или логически связанных данных.

Список представляет собой последовательность элементов, пронумерованных от 0, как символы в строке.

Создание списка
Чтобы создать список, нужно перечислить его элементы через запятую в квадратных скобках:

numbers = [2, 4, 6, 8, 10]
languages = ['Python', 'C#', 'C++', 'Java']
Список numbers состоит из 5 элементов, и каждый из них — целое число.

numbers[0] == 2;
numbers[1] == 4;
numbers[2] == 6;
numbers[3] == 8;
numbers[4] == 10.
Список languages состоит из 4 элементов, каждый из которых — строка.

languages[0] == 'Python';
languages[1] == 'C#';
languages[2] == 'C++';
languages[3] == 'Java'.
    Значения, заключенные в квадратные скобки и отделенные запятыми, называются элементами списка.

Список может содержать значения разных типов данных:

info = ['Timur', 1992, 61.5]
Список info содержит строковое значение, целое число и число с плавающей точкой.

info[0] == 'Timur';
info[1] == 1992;
info[2] == 61.5.
 Обычно элементы списка содержат данные одного типа и на практике редко приходится создавать списки содержащие элементы разных типов данных.

Пустой список
Создать пустой список можно двумя способами:

Использовать пустые квадратные скобки [];
Использовать встроенную функцию, которая называется list.
Следующие две строки кода создают пустой список:

mylist = []       # пустой список
mylist = list()   # пустой список
Вывод списка
Для вывода всего списка можно применить функцию print():

numbers = [2, 4, 6, 8, 10]
languages = ['Python', 'C#', 'C++', 'Java']
print(numbers)
print(languages)
Функция print() выводит на экран элементы списка, в квадратных скобках, разделенные запятыми:

[2, 4, 6, 8, 10]
['Python', 'C#', 'C++', 'Java']
Обратите внимание, что вывод списка содержит квадратные скобки. Позже мы научимся выводить элементы списка в более удобном виде с помощью циклов.

Встроенная функция list
Python имеет встроенную функцию list(), которая помимо создания пустого списка может преобразовывать некоторые типы объектов в списки.

Например, мы знаем, что функция range() создает последовательность целых чисел в заданном диапазоне. Для преобразования этой последовательности в список, мы пишем следующий код:

numbers = list(range(5))
Во время исполнения этого кода происходит следующее:

Вызывается функция range(), в которую в качестве аргумента передается число 5;
Эта функция возвращает последовательность чисел 0, 1, 2, 3, 4;
Последовательность чисел 0, 1, 2, 3, 4 передается в качестве аргумента в функцию list();
Функция list() возвращает список [0, 1, 2, 3, 4];
Список [0, 1, 2, 3, 4] присваивается переменной numbers.
Вот еще один пример:

even_numbers = list(range(0, 10, 2))  # список содержит четные числа 0, 2, 4, 6, 8
odd_numbers = list(range(1, 10, 2))   # список содержит нечетные числа 1, 3, 5, 7, 9
Точно также с помощью функции list() мы можем создать список из символов строки.  Для преобразования строки в список мы пишем следующий код:

s = 'abcde'
chars = list(s)  # список содержит символы 'a', 'b', 'c', 'd', 'e'
Во время исполнения этого кода происходит следующее:

Вызывается функция list(), в которую в качестве аргумента передается строка 'abcde';
Функция list() возвращает список ['a', 'b', 'c', 'd', 'e'];
Список ['a', 'b', 'c', 'd', 'e'] присваивается переменной chars.


Основы работы со списками
Работа со списками очень сильно напоминает работу со строками, поскольку и списки, и строки содержат отдельные элементы: элементы списка могут иметь произвольный тип, а элементами строк всегда являются символы. Многое из того, что мы делали со строками, доступно и при работе со списками.

Функция len()
Длиной списка называется количество его элементов. Для того, чтобы посчитать длину списка мы используем встроенную функцию len() (от слова length – длина).

Следующий программный код:

numbers = [2, 4, 6, 8, 10]
languages = ['Python', 'C#', 'C++', 'Java']

print(len(numbers))      # выводим длину списка numbers
print(len(languages))    # выводим длину списка languages

print(len(['apple', 'banana', 'cherry']))   # выводим длину списка, состоящего из 3 элементов
выведет:

5
4
3
Оператор принадлежности in
Оператор in позволяет проверить, содержит ли список некоторый элемент.

Рассмотрим следующий код:

numbers = [2, 4, 6, 8, 10]

if 2 in numbers:
    print('Список numbers содержит число 2')
else:
    print('Список numbers не содержит число 2')
Такой код проверяет, содержит ли список numbers число 2 и выводит соответствующий текст:

Список numbers содержит число 2
Мы можем использовать оператор in вместе с логическим оператором not. Например

numbers = [2, 4, 6, 8, 10]

if 0 not in numbers:
    print('Список numbers не содержит нулей')
Индексация
При работе со строками мы использовали индексацию, то есть обращение к конкретному символу строки по его индексу. Аналогично, можно индексировать и списки.

Для индексации списков в Python используются квадратные скобки [], в которых указывается индекс (номер) нужного элемента в списке:

Пусть numbers = [2, 4, 6, 8, 10].

Таблица ниже, показывает как работает индексация:

Выражение	Результат	Пояснение
numbers[0]	2	первый элемент списка
numbers[1]	4	второй элемент списка
numbers[2]	6	третий элемент списка
numbers[3]	8	четвертый элемент списка
numbers[4]	10	пятый элемент списка
    Обратите внимание первый элемент списка numbers[0], а не numbers[1].

Так же, как и в строках, для нумерации с конца разрешены отрицательные индексы.

Выражение	Результат	Пояснение
numbers[-1]	10	пятый элемент списка
numbers[-2]	8	четвертый элемент списка
numbers[-3]	6	третий элемент списка
numbers[-4]	4	второй элемент списка
numbers[-5]	2	первый элемент списка
Как и в строках, попытка обратиться к элементу списка по несуществующему индексу:

print(numbers[17])
вызовет ошибку:

IndexError: index out of range
Срезы
Рассмотрим список numbers = [2, 4, 6, 8, 10].

С помощью среза мы можем получить несколько элементов списка, создав диапазон индексов разделенных двоеточием numbers[x:y].

Следующий программный код:

print(numbers[1:3])
print(numbers[2:5])
выводит:

[4, 6]
[6, 8, 10]
При построении среза numbers[x:y] первое число – это то место, где начинается срез (включительно), а второе – это место, где заканчивается срез (невключительно). Разрезая списки, мы создаем новые списки, по сути, подсписки исходного.

При использовании срезов со списками мы также можем опускать второй параметр в срезе numbers[x:] (но поставить двоеточие), тогда срез берется до конца списка. Аналогично если опустить первый параметр numbers[:y], то можно взять срез от начала списка.

     Срез numbers[:] возвращает копию исходного списка.

Как и в строках, мы можем использовать отрицательные индексы в срезах списков.

Использование срезов для изменения элементов в заданном диапазоне
Для изменения целого диапазона элементов списка можно использовать срезы. Например, если мы хотим перевести на русский язык названия фруктов 'banana', 'cherry', 'kiwi', то это можно сделать с помощью среза.

Следующий программный код:

fruits = ['apple', 'apricot', 'banana', 'cherry', 'kiwi', 'lemon', 'mango']
fruits[2:5] = ['банан', 'вишня', 'киви']

print(fruits)
выводит:

['apple', 'apricot', 'банан', 'вишня', 'киви', 'lemon', 'mango']
Операция конкатенации + и умножения на число *
Мы можем применять операторы + и * для списков подобно тому как мы это делали со строками.

Следующий программный код:

print([1, 2, 3, 4] + [5, 6, 7, 8])
print([7, 8] * 3)
print([0] * 10)
выводит:

[1, 2, 3, 4, 5, 6, 7, 8]
[7, 8, 7, 8, 7, 8]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Для генерации списков, состоящих строго из повторяющихся элементов, умножение на число — самый короткий и правильный метод.

Мы также можем использовать расширенные операторы += и *= при работе со списками.

Следующий программный код:

a = [1, 2, 3, 4]
b = [7, 8]
a += b   # добавляем к списку a список b
b *= 5   # повторяем список b 5 раз

print(a)
print(b)
выводит:

[1, 2, 3, 4, 7, 8]
[7, 8, 7, 8, 7, 8, 7, 8, 7, 8]
Встроенные функции sum(), min(), max()
Встроенная функция sum() принимает в качестве параметра список чисел и вычисляет сумму его элементов.

Следующий программный код:

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print('Сумма всех элементов списка =', sum(numbers))
выводит:

Сумма всех элементов списка = 55
Встроенные функции min() и max() принимают в качестве параметра список и находят минимальный и максимальный элементы соответственно.

Следующий программный код:

numbers = [3, 4, 10, 3333, 12, -7, -5, 4]
print('Минимальный элемент =', min(numbers))
print('Максимальный элемент =', max(numbers))
выводит:

Минимальный элемент = -7
Максимальный элемент = 3333
Отличие списков от строк
Несмотря на всю схожесть списков и строк, есть одно очень важное отличие: строки — неизменяемые объекты, а списки – изменяемые.

 Следующий программный код:

s = 'abcdefg'
s[1] = 'x'    # пытаемся изменить 2 символ (по индексу 1) строки
приводит к ошибке:

object does not support item assignment
Следующий программный код:

numbers = [1, 2, 3, 4, 5, 6, 7]
numbers[1] = 101     # изменяем 2 элемент (по индексу 1) списка
print(numbers)
выводит:

[1, 101, 3, 4, 5, 6, 7]


Добавление элементов
Мы научились создавать статические списки, то есть списки, элементы которых известны на этапе создания. Следующий шаг – научиться добавлять элементы в уже существующие списки.

Метод append()
Для добавления нового элемента в конец списка используется метод append().

Следующий программный код:

numbers = [1, 1, 2, 3, 5, 8, 13]  # создаем список

numbers.append(21)  # добавляем число 21 в конец списка
numbers.append(34)  # добавляем число 34 в конец списка

print(numbers)
выведет:

[1, 1, 2, 3, 5, 8, 13, 21, 34]
Обратите внимание, для того чтобы использовать метод append(), нужно, чтобы список был создан, при этом он может быть пустым.

Следующий программный код:

numbers = []  # создаем пустой список

numbers.append(1)
numbers.append(2)
numbers.append(3)

print(numbers)
выведет:

[1, 2, 3]
Важно: мы не можем использовать индексаторы для установки значений элементов списка, если список пустой. Следующий программный код:

numbers = []  # создаем пустой список

numbers[0] = 1
numbers[1] = 2
numbers[2] = 3

print(numbers)
приводит к ошибке:

IndexError: list assignment index out of range
Метод extend()
Можно также расширить список другим списком, путем вызова метода extend().

Следующий программный код:

numbers = [0, 2, 4, 6, 8, 10]
odds = [1, 3, 5, 7]

numbers.extend(odds)
print(numbers)
выведет:

[0, 2, 4, 6, 8, 10, 1, 3, 5, 7]
Метод extend() как бы расширяет один список, добавляя к нему элементы другого списка.

Отличие между методами append() и extend() проявляется при добавлении строки к списку.

Следующий программный код:

words1 = ['iq option', 'stepik', 'beegeek']
words2 = ['iq option', 'stepik', 'beegeek']

words1.append('python')
words2.extend('python')

print(words1)
print(words2)
выведет:

['iq option', 'stepik', 'beegeek', 'python']
['iq option', 'stepik', 'beegeek', 'p', 'y', 't', 'h', 'o', 'n']
Метод append() добавляет строку 'python' целиком к списку, а метод extend() разбивает строку 'python' на  символы 'p', 'y', 't', 'h', 'o', 'n' и их добавляет в качестве элементов списка.

Удаление элементов
С помощью оператора del можно удалять элементы списка по определенному индексу.

Следующий программный код:

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[5]    # удаляем элемент имеющий индекс 5

print(numbers)
выведет:

[1, 2, 3, 4, 5, 7, 8, 9]
Элемент под указанным индексом удаляется, а список перестраивается.

Обратите внимание на синтаксис удаления, так как он отличается от обычного вызова метода. При удалении элементов не надо передавать аргумент внутри круглых скобок.

Оператор del работает и со срезами: мы можем удалить целый диапазон элементов списка.

Следующий программный код:

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[2:7]    # удаляем элементы с 2 по 6 включительно

print(numbers)
выведет:

[1, 2, 8, 9]
Мы можем удалить все элементы на четных позициях (0, 2, 4, ...) исходного списка.

Следующий программный код:

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[::2]

print(numbers)
 выведет:

[2, 4, 6, 8]


Вывод элементов списка
При выводе содержимого списка с помощью функции print()  вывод элементов осуществляется в квадратных скобках, причем все элементы разделены запятой. Такой вывод не всегда удобен и предпочтителен, поэтому нужно уметь выводить элементы списка нужным нам способом.

Вывод с помощью цикла for
Для вывода элементов списка каждого на отдельной строке можно использовать следующий код:

Вариант 1. Если нужны индексы элементов:

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in range(len(numbers)):
    print(numbers[i])
Мы передаем в функцию range() длину списка len(numbers). В нашем случае длина списка numbers, равна 11. Таким образом вызов функции range(len(numbers)) имеет вид range(11) и переменная цикла i последовательно перебирает все значения от 0 до 10. Это означает, что выражение numbers[i] последовательно вернет все элементы списка numbers. Такой способ итерации списка удобен, когда нам нужен не только сам элемент numbers[i], но и его индекс i.

Вариант 2. Если индексы не нужны:

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for num in numbers:
    print(num)
Этот цикл пройдет по списку numbers, придавая переменной цикла num значение каждого элемента списка (!) в отличии от предыдущего цикла, в котором переменная цикла «бегала» по индексам списка.

Если требуется выводить  элементы списка на одной строке, через пробел, то мы можем использовать необязательный параметр end функции print():

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for num in numbers:
    print(num, end=' ')
 Вывод с помощью распаковки списка
В Python есть удобный способ вывода элементов списка без использования цикла for.

Вариант 1. Вывод элементов списка через один символ пробела:

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(*numbers)
Такой код выведет:

0 1 2 3 4 5 6 7 8 9 10
Вариант 2. Вывод элементов списка, каждого на отдельной строке

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(*numbers, sep='\n')
Такой код выведет:

0
1
2
3
4
5
6
7
8
9
10
Поскольку строки содержат символы, подобно тому, как списки содержат элементы, то мы можем использовать распаковку строк точно также как и распаковку списков.

Такой код:

s = 'Python'

print(*s)
print()
print(*s, sep='\n')
выведет:

P y t h o n

P
y
t
h
o
n
