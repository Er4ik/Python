Целочисленный тип данных

Целые числа в Python представлены типом данных int (сокращение int происходит от слова integer).
Для определения целого числа типа int используется последовательность цифр от 0 до 9.
Явно указанное численное значение в коде программы называется целочисленным литералом.
Когда Python встречает целочисленный литерал, он создает объект типа int, хранящий указанное значение.

n = 17  # целочисленный литерал
m = 7   # целочисленный литерал

Целочисленный тип данных int используют не только потому, что он встречается в реальном мире, но и потому,
что он естественным образом возникает при создании большинства программ.

Преобразование строки в целое число
Для преобразования строки в целое число, мы используем команду int():

num = int(input()) # преобразование считанной строки в целое число

Для преобразования строки в целое число не обязательно использовать команду input().
Следующий код преобразует строку 12345 в целое число:

n = int('12345')  # преобразование строки в целое число

Если строка не является числом, то при преобразовании возникнет ошибка.

Целочисленные операторы

Язык Python предоставляет четыре основных арифметических операторов для работы с целыми числами (+, −, *, /), а так же три дополнительных (% для остатка, // для целочисленного деления и ** для возведения в степень).

Следующая программа демонстрирует все целочисленные операторы:

a = 13
b = 7

total = a + b
diff = a - b
prod = a * b
div1 = a / b
div2 = a // b
mod = a % b
exp = a ** b

print(a, '+', b, '=', total)
print(a, '-', b, '=', diff)
print(a, '*', b, '=', prod)
print(a, '/', b, '=', div1)
print(a, '//', b, '=', div2)
print(a, '%', b, '=', mod)
print(a, '**', b, '=', exp)
В результате работы такой программы будет выведено:

13 + 7 = 20
13 - 7 = 6
13 * 7 = 91
13 / 7 = 1.8571428571428572
13 // 7 = 1
13 % 7 = 6
13 ** 7 = 62748517

При обычном делении (/) получается число не являющееся целым. Деление на ноль приводит к ошибке.

Длинная арифметика
Отличительной особенностью языка Python является неограниченность целочисленного типа данных. По факту, размер числа зависит только от наличия свободной памяти на компьютере. Это отличает Python от таких языков как C++, C, C#, Java где переменные целого типа данных имеют ограничение. Например,  в языке C# диапазон целых чисел ограничен от -2^{63}−2
63
  до 2^{63} - 12
63
 −1.

atom = 10 ** 80  # количество атомов во вселенной
print('Количество атомов =', atom)
Результатом выполнения программы будет число с 81 цифрой:

Количество атомов = 100000000000000000000000000000000000000000000000000000000000000000000000000000000
Символ разделитель
Для удобного чтения чисел можно использовать символ подчеркивания:

num1 = 25_000_000
num2 = 25000000
print(num1)
print(num2)
Результатом выполнения такого кода будет:

25000000
25000000
Числа с плавающей точкой
Наравне с целыми числами в Python есть возможность работы с дробными (вещественными) числами.
Дробные (вещественные) числа в информатике называют числами с плавающей точкой.
Для представления чисел с плавающей точкой в Python используется тип данных float.

e = 2.71828  # литерал с плавающей точкой
pi = 3.1415  # литерал с плавающей точкой
В отличие от математики, где разделителем является запятая, в информатике используется точка.

Преобразование строки к числу с плавающей точкой
Для преобразования строки к числу с плавающей точкой мы используем команду float():

num = float(input()) # преобразование считанной строки в число с плавающей точкой
Для преобразования строки к числу с плавающей точкой необязательно использовать команду input().

Следующий код преобразует строку 1.2345  к числу с плавающей точкой:

n = float('1.2345')  # преобразование строки к числу с плавающей точкой
Если строка не является числом, то при преобразовании возникнет ошибка.

Арифметические операторы
Язык Python предоставляет четыре основных арифметических оператора для работы с числами с плавающей точкой (+, −, *, /) и один дополнительный (** для возведения в степень).

Следующая программа демонстрирует все целочисленные операторы:

a = 13.5
b = 2.0

total = a + b
diff = a - b
prod = a * b
div = a / b
exp = a ** b

print(a, '+', b, '=', total)
print(a, '-', b, '=', diff)
print(a, '*', b, '=', prod)
print(a, '/', b, '=', div)
print(a, '**', b, '=', exp)
В результате работы такой программы будет выведено:

13.5 + 2.0 = 15.5
13.5 - 2.0 = 11.5
13.5 * 2.0 = 27.0
13.5 / 2.0 = 6.75
13.5 ** 2.0 = 182.25
Деление на ноль приводит к ошибке.

Преобразование между int и float
Неявное преобразование. Любое целое число (тип int) можно использовать там, где ожидается число с плавающей точкой (тип float), поскольку при необходимости Python автоматически преобразует целые числа в числа с плавающей точкой.

Явное преобразование. Число с плавающей точкой нельзя неявно преобразовать в целое число. Для такого преобразования необходимо использовать явное преобразование с помощью команды int().

num1 = 17.89
num2 = -13.56
num3 = int(num1)
num4 = int(num2)
print(num3)
print(num4)
Результатом выполнения такого кода будет:

17
-13
Обратите внимание, что преобразование чисел с плавающей точкой в целое производится с округлением в сторону нуля, то есть int(1.7) = 1, int(-1.7) = -1.

Не путайте операцию преобразования и округления. Для округления чисел с плавающей точкой используются дополнительные команды. О них расскажем позже.


Встроенные функции
Python включает много заранее определенных функций. Программист не видит их реализацию, она скрыта. Достаточно знать, как эти функции называются и что они делают.

Мы уже сталкивались с встроенными функциями:

print() — вывести на экран;
input() — считать с клавиатуры;
int() — преобразовать к целому числу;
float() — преобразовать к числу с плавающей точкой.
Рассмотрим три новых встроенные функции, которые используются достаточно часто, при работе с числами.

Функции min() и max()
Для определения соответственно минимального или максимального значения используются функции min() и max().
Аргументов у этих функций может быть любое количество, главное, чтобы они все были одного типа.

Например, результатом выполнения следующего кода:

a = max(3, 8, -3, 12, 9)
b = min(3, 8, -3, 12, 9)
c = max(3.14, 2.17, 9.8)
print(a)
print(b)
print(c)
будет:

12
-3
9.8

Функция abs()
Модулем (абсолютной величиной) положительного числа называется само число, модулем отрицательного числа называется противоположное ему число, модуль нуля – нуль. Модуль числа aa обозначается |a|∣a∣, для него имеет место равенство:

Для нахождения модуля (абсолютной величины) числа в Python используется функция abs().

Например, результатом выполнения следующего кода:

print(abs(10))
print(abs(-7))
print(abs(0))
print(abs(-17.67))
будет:

10
7
0
17.67


ема урока: модуль math
Модуль math
Решение задач
Аннотация. Урок посвящен модулю math, который содержит математические функции по работе с вещественными числами.

Модули
Как уже говорилось, одним из преимуществ языка Python является множество разнообразных функций, которые уже реализованы и готовы к использованию. Такие функции упакованы в модули. В Python модулем называется библиотека функций, которую можно подключать к своим программам.

Модуль math
Модуль math – один из наиважнейших в Python. Этот модуль предоставляет обширный функционал для проведения вычислений с вещественными числами (числами с плавающей точкой).

Для использования этих функций в начале программы необходимо подключить модуль, что делается командой import:

import math

# программный код
После подключения модуля мы можем использовать его функции. Пусть мы хотим:

вычислить \sqrt2
2
​
  (корень квадратный из двух);
округлить число 3.83.8 до ближайшего целого числа вверх и вниз
Соответствующий программный код, решающий задачи выглядит так:

import math

num1 = math.sqrt(2)     # вычисление корня квадратного из двух
num2 = math.ceil(3.8)   # округление числа вверх
num3 = math.floor(3.8)  # округление числа вниз

print(num1)
print(num2)
print(num3)
и выводит:

1.4142135623730951
4
3
Особенности подключения модулей
Как можно заметить из примера выше, для вызова функции мы вынуждены указывать название модуля и символ точки. С другой стороны если функции используются достаточно часто, то такой вызов (постоянное указание названия модуля и символа точки) может усложнить программу и сделать её менее читабельной. Для того, чтобы не указывать название модуля и символ точки при вызове функций, мы пишем следующий код:

from math import *

num1 = sqrt(2)     # вычисление корня квадратного из двух
num2 = ceil(3.8)   # округление числа вверх
num3 = floor(3.8)  # округление числа вниз

print(num1)
print(num2)
print(num3)
Таким образом, подключение модуля следующим образом:

from math import *
позволяет не писать название модуля и символ точки. При таком способе подключения, импортируются абсолютно все функции модуля math.

Если нужно использовать только некоторые функции модуля, то мы можем импортировать только их следующим образом:

from math import sqrt, ceil
Теперь мы можем вызывать функции sqrt() и ceil() без префикса math., однако мы не можем вызвать функцию floor(), так как она не подключена:

from math import sqrt, ceil

print(sqrt(25))
print(ceil(34.7))

print(floor(12.8))  # приведет к ошибке, так как функция floor не подключена
Список функций модуля math
Список наиболее часто используемых функций модуля math:

Функция	Описание
Округления
int()	Округляет число в сторону нуля
round(x)	Округляет число x до ближайшего целого. Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
round(x, n)	Округляет число x до n знаков после точки
floor(x)	Округляет число x вниз («пол»)
ceil(x)	Округляет число x вверх («потолок»)
abs(x)	Модуль числа x (абсолютная величина)
Корни, логарифмы, степени и факториал
sqrt(x)	Квадратный корень числа x
pow(x, n)	Возведение числа x в степень n
log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
log(x, b)	Логарифм числа x по основанию b
factorial(n)	Факториал натурального числа n
Тригонометрия
degrees(x)	Преобразует угол x, заданный в радианах, в градусы
radians(x)	Преобразует угол x, заданный в градусах, в радианы
cos(x)	Косинус угла x, задаваемого в радианах
sin(x)	Синус угла x, задаваемого в радианах
tan(x)	Тангенс угла x, задаваемого в радианах
acos(x)	Возвращает угол в радианах от 00 до \piπ, cos которого равен x
asin(x)	Возвращает угол в радианах от - \frac{\pi}{2}−
2
π
​
  до \frac{\pi}{2}
2
π
​
 , sin которого равен x
atan(x)	Возвращает угол в радианах от - \frac{\pi}{2}−
2
π
​
  до \frac{\pi}{2}
2
π
​
 , tan которого равен x
atan2(y, x)	Полярный угол (в радианах) точки с координатами (x, y)
